(* Section 4: Type Inference Examples *)

(* 
   f : T1 -> T2 [must be a function; all functions take 1 arg]
   x : T1
   
   y : T3
   z : T4
   T1 = T3 * T4 [else pattern match does not type-check]
   T3 = int [abs has type int -> int]
   T4 = int [because we added z to an int]
   So T1 = int * int
   So (abs y) + z : int, so let expression : int, so body : int 
   T2 = int
   f : int * int -> int
*)

fun f x =
    let val (y,z) = x in
	(abs y) + z
    end



(* 
   sum : T1 -> T2
   xs : T1
   
   x: T3
   xs : T3 list [pattern match a T1]
   
   T1 = T3 list
   T2 = int [because 0 might be returned]
   T3 = int [becuase x:T3 and we add x to something]
   from T1 = T3 list and T3 = int, we know T1 = int list
   from that and T2=int, we know f : int list -> int
  *)
fun sum xs =
    case xs of
	[] => 0
      | x::xs' => x + (sum xs');

(* 
lenght : T1 -> T2
xs : T1

x : T3
xs : T3 list

T1 = T3 list
T2 = int

T3 list -> int
'a list -> int
*)
fun length xs =
    case xs of
	[] => 0
      | x::xs' => 1 + (length xs');


(* 'a * 'a * 'b -> 'a * 'a * 'b *)
fun f (x, y, z) =
    if true
    then (x,y,z)
    else (y,x,z);


(* 
('a -> 'b) * ('c -> 'a) -> ('c -> 'b)
*)
fun compose (f, g) = fn x => f (g, x);


